<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>

<head id="i18n_" module="">
    <!--#include virtual="/views/items/resource_.shtml"-->
    <title>添加或编辑--监控阈值设置</title>
    <script type="text/javascript" src="/js/datagrid_utils.js"></script>
    <style type="text/css">
        td {
            padding: 2px;
        }

        button {
            width: 45px;
            height: 20px;
            margin-left: 3px;
            vertical-align: middle;
            border: 1px solid #cfcfcf;
            -moz-border-radius: 5px;
            border-radius: 5px;
            backgroud: #d5d5d5;
        }

        .addBtn {
            padding: 1px 10px;
        }
    </style>
</head>
<body>
<div style="width:95%;margin:0 auto;">
    <div class="ibox float-e-margins">
        <div class="ibox-content">
            <form class="form-horizontal m-t" id="mform">
                <div id="p0" class="easyui-panel" title="监控阈值设置" style="width: 100%;"></div>
                <input type="hidden" id="pkid" name="pkid"/>
                <input type="hidden" id="deleteFlag" name="deleteFlag"/>
                <input type="hidden" id="modifyUser" name="modifyUser"/>
                <table class="table table-bordered table-info" style="width: 100%">
                    <tr>
                        <td colspan="6" align="right" style="padding: 0;">
                            <input class="btn btn-primary" type="button" id="saveBtn" onclick="save()" value="保存"/>
                            <input class="btn btn-primary" type="button" onclick="CloseWindowIframe();" value="关闭"
                                   style="margin-left:3px;margin-right: 20px;"/>
                        </td>
                    </tr>
                    <tr>
                        <th>数据来源：</th>
                        <td colspan="5">
                            <input class="easyui-combobox" id="dataSource" name="dataSource"
                                   data-options="required:true,editable:false"
                                   style="width: 140px;"/>
                    </tr>
                    <tr>
                        <th>监控名称：</th>
                        <td colspan="3">
                            <input class="easyui-textbox" id="alertName" name="alertName" data-options="required:true"
                                   style="width: 634px;"/>
                        </td>
                        <th>飞行阶段：</th>
                        <td>
                            <input class="easyui-combobox" id="flightPhase" name="flightPhase"
                                   data-options="required:true,editable:false"
                                   style="width: 140px;"/>
                    </tr>
                    <tr>
                        <th>监控对象：</th>
                        <td class="tdr" colspan="5">
                            <div style="height: 40px;border: 1px solid #eeeeee">
                                <input id="airplane" type="radio" name="monitorObj" value="airplane"
                                       style="float: left;margin: 14px 0px 0px 6px;"
                                       onclick="chooseMonitorObj('airplane')"><span
                                    style="float: left;margin: 12px 0px 0px 5px;">飞机</span></input>
                                <div style="float:left;margin: 10px 0px 0px 106px;">
                                    <span>机型:</span>&nbsp;
                                    <input class="easyui-combobox" id="acType" name="acType" data-options=""
                                           style="width: 140px;"/>
                                </div>
                                <div style="float: left;margin: 10px 0px 0px 76px;">
                                    <span>机号:</span>&nbsp;
                                    <input class="easyui-combobox" id="acRegs" name="acRegs"
                                           data-options="multiple:true"
                                           style="width: 424px;"/>
                                </div>
                            </div>
                            <div style="height: 40px;border: 1px solid #eeeeee">
                                <input id="engine" type="radio" name="monitorObj" value="engine"
                                       style="float: left;margin: 14px 0px 0px 6px;"
                                       onclick="chooseMonitorObj('engine')"><span
                                    style="float: left;margin: 12px 0px 0px 5px;">发动机</span></input>
                                <div style="float:left;margin: 10px 0px 0px 58px;">
                                    <span>发动机型号:</span>&nbsp;
                                    <input class="easyui-combobox" id="epn" name="epn" data-options=""
                                           style="width: 140px;"/>
                                </div>
                                <div style="float: left;margin: 10px 0px 0px 40px;">
                                    <span>发动机序号:</span>&nbsp;
                                    <input class="easyui-combobox" id="esns" name="esns" data-options="multiple:true"
                                           style="width: 424px;"/>
                                </div>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <th>逻辑关系：</th>
                        <td class="tdr" colspan="5">
                            <input class="easyui-textbox" id="assemble" name="assemble"
                                   data-options="multiline:true,onlyview:true,editable:false"
                                   style="width: 866px;height: 80px;"/>
                            <input class="btn btn-primary" type="button" id="andBtn" name="andBtn"
                                   onclick="addWrite()"
                                   style="width:60px;" value="AND"/>
                            <input class="btn btn-primary" type="button" id="orBtn" name="orBtn"
                                   onclick="orWrite()"
                                   style="width:60px;" value="OR"/>
                            <input class="btn btn-primary" type="button" id="leftBrackBtn" name="leftBrackBtn"
                                   onclick="leftBrackWrite()"
                                   style="width:60px;" value="("/>
                            <input class="btn btn-primary" type="button" id="rightBrackBtn" name="rightBrackBtn"
                                   onclick="rightBrackWrite()"
                                   style="width:60px;" value=")"/>
                            <input class="btn btn-primary" type="button" id="removeWord" name="removeWord"
                                   onclick="removeInput()"
                                   style="width:80px;background-color: #dd0000" value="一键清除"/>
                        </td>
                    </tr>
                    <tr>
                        <th>备注：</th>
                        <td class="tdr" colspan="5">
                            <input class="easyui-textbox" id="memo" name="memo" data-options=""
                                   style="width: 866px;"/>
                        </td>
                    </tr>
                    <tr>
                        <th>维护人：</th>
                        <td>
                            <input class="easyui-textbox" id="modifyName" name="modifyName"
                                   data-options="editable:false,onlyview:true"/>
                        </td>
                        <th>维护日期：</th>
                        <td>
                            <input class="easyui-datebox" id="modifyDate" name="modifyDate"
                                   data-options="editable:false,onlyview:true"/>
                        </td>
                        <td colspan="2">
                            <a href="javascript:void(0)" id="addLogic" class="addBtn" onclick="addLogic('add')"
                               style="float: right;margin-right: 15px;"><span>添加逻辑</span></a>
                        </td>
                    </tr>
                </table>
            </form>
            <table id="dg"></table>
        </div>
    </div>
</div>
<script>
    var PAGE_DATA = {};
    var param = {};
    var setId;
    var operation;
    var user;
    var userLogin;
    var currentDate = new Date();
    var year = currentDate.getFullYear().toString();
    var month = (currentDate.getMonth() + 1).toString();
    var day = currentDate.getDate().toString();
    function i18nCallBack() {
        param = getParentParam_();
        user = getLoginInfo();
        operation = param.operation;
        setId = param.pkid;
        userLogin = getLoginInfo();
        $("#modifyName").textbox('setValue', userLogin.userName);
        $("#modifyDate").datebox('setValue', year + "-" + month + "-" + day);
        $("#modifyUser").val(userLogin.accountId);


        if ("view" == operation) {
            $(".easyui-textbox").textbox({required: false, onlyview: true});
            $(".easyui-combobox").combobox({required: false, onlyview: true});
            $("input[name='monitorObj']").attr("disabled", true);
            $("#saveBtn").hide();
            $("#addLogic").hide();
            $("#andBtn").hide();
            $("#orBtn").hide();
            $("#leftBrackBtn").hide();
            $("#rightBrackBtn").hide();
            $("#removeWord").hide();
        }

        if ("add" == operation) {
            $("input[name='monitorObj'][value='airplane']").attr("checked", true);
            $("#epn").combobox({onlyview: true, editable: false});
            $("#esns").combobox({onlyview: true, editable: false});
        }


        InitFuncCodeRequest_({
            async: false,
            data: {
                domainCode: "ENG_PER_SOURCE_TYPE,ENG_PER_FLIGHT_PHASE,DA_FLEET,ENG_PER_ALERT_TYPE,ENG_PER_DATA_TYPE,ENG_PER_FORWARD_UNIT,ENG_BAS_COMPARE,ENG_PER_COL_NAME,ENG_PER_FLIGHT_PHASE1,ENG_PER_PERFM_TYPE",
                FunctionCode: "ANALYSIS_DOMAIN_BYCODE"
            },
            successCallBack: function (jdata) {
                if (jdata.code == RESULT_CODE.SUCCESS_CODE) {
                    //数据来源
                    $('#dataSource').combobox({
                        panelHeight: '80px',
                        data: jdata.data.ENG_PER_SOURCE_TYPE,
                        valueField: 'VALUE',
                        textField: 'TEXT',
                        onSelect: function (item) {
                            if ("1" == item.VALUE) { //厂家数据
                                //飞行阶段
                                $('#flightPhase').combobox({
                                    panelHeight: '80px',
                                    data: jdata.data.ENG_PER_FLIGHT_PHASE,
                                    valueField: 'VALUE',
                                    textField: 'TEXT'
                                });
                            } else { //QAR数据
                                $('#flightPhase').combobox({
                                    panelHeight: '80px',
                                    data: jdata.data.ENG_PER_FLIGHT_PHASE1,
                                    valueField: 'VALUE',
                                    textField: 'TEXT'
                                });
                            }
                        }
                    });
                    //发动机型号
                    InitGatewayRequest_({
                        type: "get",
                        async: false,
                        path: "/meng-engine/baseOwn/getEngType",
                        successCallBack: function (jdata) {
                            if (jdata.success == true) {
                                $('#epn').combobox({
                                    data: jdata.obj,
                                    valueField: 'VALUE',
                                    textField: 'TEXT',
                                    panelHeight: '150px',
                                    onSelect: function (item) {
                                        //获取发动机序号
                                        InitGatewayRequest_({
                                            async: false,
                                            data: {matnr: item.VALUE},
                                            path: "/meng-engine/baseOwn/getEngByType",
                                            successCallBack: function (jdata) {
                                                if (jdata.success == true) {
                                                    $('#esns').combobox({
                                                        data: jdata.obj,
                                                        valueField: 'VALUE',
                                                        textField: 'TEXT',
                                                        panelHeight: '150px'
                                                    });
                                                } else {
                                                    MsgAlert({content: '获取发动机序号列表失败', type: 'error'});
                                                }
                                            }
                                        });
                                    }
                                });
                            } else {
                                MsgAlert({content: '获取发动机型号列表失败', type: 'error'});
                            }
                        }
                    });
                    //获取发动机序号
                    InitGatewayRequest_({
                        async: false,
                        data: {matnr: ''},
                        path: "/meng-engine/baseOwn/getEngByType",
                        successCallBack: function (jdata) {
                            if (jdata.success == true) {
                                $('#esns').combobox({
                                    data: jdata.obj,
                                    valueField: 'VALUE',
                                    textField: 'TEXT',
                                    panelHeight: '150px'
                                });
                            } else {
                                MsgAlert({content: '获取发动机序号列表失败', type: 'error'});
                            }
                        }
                    });
                    //机号
                    $('#acRegs').combobox({
                        panelHeight: '100px',
                        url: Constant.API_URL + 'DA_ACTYPE_GET_ACNOS',
                        valueField: 'VALUE',
                        textField: 'TEXT',
                        loadFilter: function (jdata) {
                            return jdata.data;
                        }
                    });
                    //机型
                    $('#acType').combobox({
                        panelHeight: '100px',
                        data: jdata.data.DA_FLEET,
                        valueField: 'VALUE',
                        textField: 'TEXT',
                        onSelect: function (item) {
                            $('#acRegs').combobox({ //机号
                                panelHeight: '100px',
                                queryParams: {acType: item.VALUE},
                                url: Constant.API_URL + 'DA_ACTYPE_GET_ACNOS',
                                valueField: 'VALUE',
                                textField: 'TEXT',
                                loadFilter: function (jdata) {
                                    return jdata.data;
                                }
                            });
                        }
                    });
                    //监控类别
                    PAGE_DATA['alertType'] = DomainCodeToMap_(jdata.data["ENG_PER_ALERT_TYPE"]);
                    //参数值处理类别
                    PAGE_DATA['valueType'] = DomainCodeToMap_(jdata.data["ENG_PER_DATA_TYPE"]);
                    //当前点往前推单位
                    PAGE_DATA['hisForwardUnit'] = DomainCodeToMap_(jdata.data["ENG_PER_FORWARD_UNIT"]);
                    //阈值比较类别
                    PAGE_DATA['compareType'] = DomainCodeToMap_(jdata.data["ENG_BAS_COMPARE"]);
                    //参数名称
                    PAGE_DATA['perColName'] = DomainCodeToMap_(jdata.data["ENG_PER_PERFM_TYPE"]);
                    if (setId) {
                        InitDataForm(setId);
                        InitDataGrid(setId);
                    } else {
                        InitDataGrid(-1);
                    }
                } else {
                    MsgAlert({content: jdata.msg, type: 'error'});
                }
            }
        });
    }

    function InitDataGrid(setId) {
        $("#dg").GatewayDataGrid({
            identity: 'dg',
            queryParams: {
                setId: setId
            },
            pagination: false,
            path: "/meng-engine/engPerSetDetail/listByPage",
            resize: function () {
                return {width: 976, height: 220};
            },
            columns: {
                param: {FunctionCode: 'ENG_PER_SET_DETAIL_LIST'},
                alter: {
                    curParameter: {
                        formatter: function (value) {
                            return PAGE_DATA['perColName'][value];
                        }
                    },
                    hisParameter: {
                        formatter: function (value) {
                            return PAGE_DATA['perColName'][value];
                        }
                    },
                    curValueType: {
                        formatter: function (value) {
                            return PAGE_DATA['valueType'][value];
                        }
                    },
                    hisValueType: {
                        formatter: function (value) {
                            return PAGE_DATA['valueType'][value];
                        }
                    },
                    hisForwardUnit: {
                        formatter: function (value) {
                            return PAGE_DATA['hisForwardUnit'][value];
                        }
                    },
                    compareType: {
                        formatter: function (value) {
                            return PAGE_DATA['compareType'][value];
                        }
                    },
                    alertType: {
                        formatter: function (value) {
                            return PAGE_DATA['alertType'][value];
                        }
                    },
                    modifyDate: {
                        type: 'date'
                    }
                }
            },
            contextMenus: [
                {
                    id: "m-view", i18nText: "查看",
                    auth: "",
                    onclick: function () {
                        var rowData = getDG('dg').datagrid('getSelected');
                        if (!rowData.pkid) {
                            MsgAlert({content: "请选择数据！", type: 'error'});
                            return;
                        }
                        addLogic('view', rowData.pkid);
                    }
                },
                {
                    id: "m-edit", i18nText: "编辑",
                    auth: "",
                    onclick: function () {
                        var rowData = getDG('dg').datagrid('getSelected');
                        if (!rowData.pkid) {
                            MsgAlert({content: "请选择数据！", type: 'error'});
                            return;
                        }
                        addLogic('edit', rowData.pkid);
                    }
                },
                {
                    id: "m-delete", i18nText: "删除",
                    auth: "",
                    onclick: function () {
                        var rowData = getDG('dg').datagrid('getSelected');
                        if (!rowData.pkid) {
                            MsgAlert({content: "请选择数据！", type: 'error'});
                            return;
                        }
                        if (!confirm("是否确认删除？")) {
                            return;
                        }
                        InitGatewayRequest_({
                            type: "get",
                            async: false,
                            path: "/meng-engine/engPerSetDetail/deleteEngPerSetDetailById/" + rowData.pkid,
                            successCallBack: function (jdata) {
                                if (jdata.success == true) {
                                    MsgAlert({content: $.i18n.t('msg_tip:TIP.COMMON.OPT_SUCCESS')});
                                    reload_logic(setId);
                                    param.OWindow.InitDataGrid1(setId);
                                } else {
                                    MsgAlert({content: jdata.errorMessage, type: 'error'});
                                }
                            }
                        });
                    }
                }
            ],
            validAuth: function (row, items) {
                if ("view" == operation) {
                    items['编辑'].display = false;
                    items['删除'].display = false;
                }
                return items;
            },
//            onDblClickRow: function (index, field, value) {
//                addLogic("view", value.pkid);
//            }
            onClickRow: function (index, row) {
                if ("view" != operation) {
                    var selectedLogicName = row.logicName;
                    var originAssemble = $("#assemble").textbox('getValue');
                    $("#assemble").textbox('setValue', originAssemble + " " + selectedLogicName);
                }
            }
        });
    }

    //保存
    function save() {
        var isValidate = $("#mform").form('validate');
        if (!isValidate) {
            return;
        }
        var chooseType = $("input[name='monitorObj'][checked]").val();
        var acType = $("#acType").combobox('getValue');
        var acRegs = $("#acRegs").combobox('getValue');
        var epn = $("#epn").combobox('getValue');
        var esns = $("#esns").combobox('getValue');
        //start 校验括号匹配
        var assemble = $("#assemble").textbox('getValue');
        assemble = assemble.replace(/\s+/g, "");
        var leftBracketNum = 0;
        var rightBracketNum = 0;
        for (var i = 0; i < assemble.length; i++) {
            var str = assemble.charAt(i);
            if (str == "(") {
                leftBracketNum++;
            }
            if (str == ")") {
                rightBracketNum++;
            }
        }
        if (leftBracketNum != rightBracketNum) {
            MsgAlert({content: "逻辑关系中存在未闭合括号，请检查后再保存!", type: 'error'});
            return;
        }
        //end 校验括号匹配
        if ("engine" == chooseType) {
            if ("" == epn && undefined == esns) {
                MsgAlert({content: "发动机型号和序号两个字段至少需要输入一个！", type: 'error'});
                return;
            }
        } else if ("airplane" == chooseType) {
            if ("" == acType && undefined == acRegs) {
                MsgAlert({content: "机型和机号两个字段至少需要输入一个！", type: 'error'});
                return;
            }
        }
        var pkid = $("#pkid").val();
        if (pkid) {
            operation = 'edit';
        } else {
            operation = 'add';
        }
        saveOrUpdateData(operation);
    }

    function saveOrUpdateData(operation) {
        var $form = $("#mform");
        var datas = $form.serializeObject();
        var acRegs = $("#acRegs").combobox('getText');
        var esns = $("#esns").combobox('getText');
        datas['operation'] = operation;
        datas['acRegs'] = acRegs;
        datas['esns'] = esns;
        InitGatewayRequest_({
            async: false,
            path: "/meng-engine/engPerSet/addOrEditEngPerSet",
            data: datas,
            successCallBack: function (jdata) {
                if (jdata.success == true) {
                    MsgAlert({content: $.i18n.t('msg_tip:TIP.COMMON.OPT_SUCCESS')});
                    param.OWindow.reload_parent();
                    param.OWindow.InitDataGrid1(setId);
                    $("#pkid").val(jdata.obj.pkid);
                } else {
                    MsgAlert({content: jdata.errorMessage, type: 'error'});
                }
            }
        });
    }

    //回显
    function InitDataForm(setId) {
        $("#pkid").val(setId);
        InitGatewayRequest_({
            type: "get",
            async: false,
            path: "/meng-engine/engPerSet/selectEngPerSetById/" + setId,
            successCallBack: function (jdata) {
                if (jdata.success == true) {
                    getFlightPhase(jdata.obj.dataSource);
                    ParseFormField_(jdata.obj, $("#mform"));
                    if (jdata.obj.acType != null || jdata.obj.acRegs != null) {//选中飞机
                        $("input[name='monitorObj'][value='airplane']").attr("checked", true);
                        $("#epn").combobox({onlyview: true, editable: false});
                        $("#esns").combobox({onlyview: true, editable: false});
                    } else if (jdata.obj.epn != null || jdata.obj.esns != null) {//选中发动机
                        $("input[name='monitorObj'][value='engine']").attr("checked", true);
                        $("#acType").combobox({onlyview: true, editable: false});
                        $("#acRegs").combobox({onlyview: true, editable: false});
                    }
                    if ("view" != operation) {
                        $("#modifyName").textbox('setValue', userLogin.userName);
                        $("#modifyDate").datebox('setValue', year + "-" + month + "-" + day);
                        $("#modifyUser").val(userLogin.accountId);
                    }
                } else {
                    MsgAlert({content: '回显失败!', type: 'error'});
                }
            }
        });
    }

    //添加逻辑
    function addLogic(operation, pkid) {
        var setId = $("#pkid").val();
        var dataSource = $("#dataSource").combobox('getValue');
        if (setId) {
            var title_ = $.i18n.t('性能监控逻辑设置');
            ShowWindowIframe({
                width: "1020",
                height: "480",
                title: title_,
                param: {pkid: pkid, operation: operation, dataSource: dataSource, setId: setId},
                url: "/views/engine/engPerSet/eng_per_set_detail_add_edit.shtml"
            });
        } else {
            MsgAlert({content: '请先保存监控阈值设置封面信息！', type: 'error'});
        }
    }

    //刷新逻辑列表
    function reload_logic(setId) {
        InitDataGrid(setId);
    }

    //选择监控对象
    function chooseMonitorObj(checkType) {
        if ("airplane" == checkType) { //飞机
            $("#acType").combobox({onlyview: false, editable: true});
            $("#acRegs").combobox({onlyview: false, editable: true});
            $("#epn").combobox({onlyview: true, editable: false});
            $("#esns").combobox({onlyview: true, editable: false});
            $("#epn").combobox('setValue', '');
            $("#esns").combobox('setValue', '');
            $("input[name='monitorObj'][value='engine']").attr("checked", false);
            $("input[name='monitorObj'][value='airplane']").attr("checked", true);
        } else if ("engine" == checkType) { //发动机
            $("#epn").combobox({onlyview: false, editable: true});
            $("#esns").combobox({onlyview: false, editable: true});
            $("#acType").combobox({onlyview: true, editable: false});
            $("#acRegs").combobox({onlyview: true, editable: false});
            $("#acType").combobox('setValue');
            $("#acRegs").combobox('setValue');
            $("input[name='monitorObj'][value='airplane']").attr("checked", false);
            $("input[name='monitorObj'][value='engine']").attr("checked", true);
        }
    }

    //刷新主表数据
    function reload_mainData() {
        param.OWindow.reload_();
    }

    //AND按钮
    function addWrite() {
        var assemble = $("#assemble").textbox('getValue');
        if (assemble == "") {
            MsgAlert({content: '逻辑关系不能以AND或OR开头!', type: 'error'});
            return;
        }
        var leftBrackValue = assemble.lastIndexOf("(");
        var orPosValue = assemble.lastIndexOf("OR");
        var AndPosValue = assemble.lastIndexOf("AND");
        var logicLength = assemble.length;
        if (leftBrackValue == (logicLength - 1)) {
            MsgAlert({content: '"AND"和 "(" 间必须要填充逻辑名称!', type: 'error'});
            return;
        }
        if (orPosValue == (logicLength - 2)) {
            MsgAlert({content: '逻辑关系中AND和OR不能前后排列!', type: 'error'});
            return;
        }
        if (AndPosValue == (logicLength - 3)) {
            MsgAlert({content: '逻辑关系中AND和AND不能前后排列!', type: 'error'});
            return;
        }
        $("#assemble").textbox('setValue', assemble + " AND");
    }

    //OR按钮
    function orWrite() {
        var assemble = $("#assemble").textbox('getValue');
        if (assemble == "") {
            MsgAlert({content: '逻辑关系不能以AND或OR开头!', type: 'error'});
            return;
        }
        var leftBrackValue = assemble.lastIndexOf("(");
        var orPosValue = assemble.lastIndexOf("OR");
        var AndPosValue = assemble.lastIndexOf("AND");
        var logicLength = assemble.length;
        if (leftBrackValue == (logicLength - 1)) {
            MsgAlert({content: '"OR"和 "(" 间必须要填充逻辑名称!', type: 'error'});
            return;
        }
        if (AndPosValue == (logicLength - 3)) {
            MsgAlert({content: '逻辑关系中AND和OR不能前后排列!', type: 'error'});
            return;
        }
        if (orPosValue == (logicLength - 2)) {
            MsgAlert({content: '逻辑关系中OR和OR不能前后排列!', type: 'error'});
            return;
        }
        $("#assemble").textbox('setValue', assemble + " OR");
    }

    //左括号按钮
    function leftBrackWrite() {
        var assemble = $("#assemble").textbox('getValue');
        $("#assemble").textbox('setValue', assemble + " (");
    }

    //右括号按钮
    function rightBrackWrite() {
        var assemble = $("#assemble").textbox('getValue');
        if (assemble == "") {
            MsgAlert({content: '逻辑关系不能“(”开头!', type: 'error'});
            return;
        }
        var leftBrackValue = assemble.lastIndexOf("(");
        var orPosValue = assemble.lastIndexOf("OR");
        var AndPosValue = assemble.lastIndexOf("AND");
        var logicLength = assemble.length;
        if (orPosValue == (logicLength - 2) || AndPosValue == (logicLength - 3)) {
            MsgAlert({content: '")" 和 "OR"、"AND" 间必须要填充逻辑名称!', type: 'error'});
            return;
        }
        if (leftBrackValue == (logicLength - 1)) {
            MsgAlert({content: '"（"和 "）" 间必须要填充逻辑名称!', type: 'error'});
            return;
        }
        $("#assemble").textbox('setValue', assemble + " )");
    }

    function getFlightPhase(dataSource) {
        InitFuncCodeRequest_({
            async: false,
            data: {
                domainCode: "ENG_PER_FLIGHT_PHASE,ENG_PER_FLIGHT_PHASE1",
                FunctionCode: "ANALYSIS_DOMAIN_BYCODE"
            }, successCallBack: function (jdata) {
                if (jdata.code == RESULT_CODE.SUCCESS_CODE) {
                    if ("1" == dataSource) {
                        //飞行阶段
                        $('#flightPhase').combobox({
                            panelHeight: '80px',
                            data: jdata.data.ENG_PER_FLIGHT_PHASE,
                            valueField: 'VALUE',
                            textField: 'TEXT'
                        });
                    } else if ("2" == dataSource) {
                        //飞行阶段
                        $('#flightPhase').combobox({
                            panelHeight: '80px',
                            data: jdata.data.ENG_PER_FLIGHT_PHASE1,
                            valueField: 'VALUE',
                            textField: 'TEXT'
                        });
                    }
                }
            }
        })
    }

    //一键删除
    function removeInput() {
        $("#assemble").textbox('setValue', '');
    }





</script>
</body>
</html>