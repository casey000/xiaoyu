<!--
  ~ Copyright 2019 SF Airlines Co., Ltd. All rights reserved.
  ~ 本文件仅限于顺丰航空有限公司内部传阅，禁止外泄以及用于其他的商业目的。
  -->

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>

<head id="i18n_" module="">
    <!--#include virtual="/views/items/resource_.shtml"-->
    <!--#include virtual="/views/defect/defect_js.shtml"-->
    <title></title>
    <style type="text/css">
        .table-cell{
            text-align: center;
            padding: 0;
            margin: 0;
        }
        .cell-normal {
            height: 40px;
        }
        th, td{
            text-align: center;
            padding: 0;
            margin: 0;
            height: 40px;
        }

        .cell-low {
            height: 20px;
        }
        .cell-high{
            height: 80px;
        }
        .require-sign {
            color: red;
        }
        .foot-btns{
            float: right;
            margin: 10px 20px 0 0;
        }
        input[type="radio"], input[type="checkbox"] {
            vertical-align: -2px
        }
        .noPoint{
            pointer-events: none;
            cursor: default;
        }
    </style>
</head>
<body>
    <form id="addWorklog">
        <div style="display: none" id="model"></div>
    <table class="table table-bordered table-info">
        <tr>
            <th class="  required" style="width: 12%" colspan="2"><span>DATE</span></th>
            <td class="  " style="width: 12%" colspan="2"><span id="dateFound" name="dateFound"></span></td>
            <th class="  required" style="width: 12%" colspan="2"><span>STATION</span></th>
            <td class="  " style="width: 12%" colspan="2"><span id="station" name="station"></span></td>
            <th class="  required" style="width: 12%" colspan="2"><span>SECTION</span></th>
            <td class="  " style="width: 12%" colspan="2"><span id="rewiewType" name="rewiewType"></span></td>
            <th class="  required" style="width: 12%" colspan="2"><span>STATUS</span></th>
            <td class="  " style="width: 12%" colspan="2">
                <label style="display: none"><input type="radio" name="status" id="statusO" value="O" >O</label>
                <label style="display: none"><input type="radio" name="status" id="statusM" style="margin-left: 5px;" value="M">M</label>
                <label style="display: none"><input type="radio" name="status" id="statusC" style="margin-left: 5px;" value="C">C</label>
            </td>
        </tr>
        <tr>
            <th class="" colspan="2"><span>关联故障</span></th>
            <td class=" " colspan="6"><input id="noDefect" name="noDefect" type="checkbox" onchange="nodefect_change()">无</td>
            <th class="required " colspan="2">故障编号</th>
            <td class=" " colspan="6" style="padding: 0 5px 0 5px;">
                <!-- <input id="serialNo" name="serialNo" type="hidden"> -->
                <input type="text" name="relatedDefectNo" id="relatedDefectNo" style="width: 180px;">
                <!-- <form style="color: black"  id="dm">
                    <input type="radio" name="dm" id="dmYes" value="y">是
                    <input type="radio" name="dm" id="dmNo" style="margin-left: 15px" value="n">否
                </form> -->
            </td>

        </tr>
        <tr>
            <th class="  required" colspan="2">ATA</th>
            <td class=" " colspan="6"><input type="text" id="ata" class="easyui-textbox" name="ata"  style="width: 120px"></td>
            <th class="  required" colspan="2"><span>专业</span></th>
            <td class=" " colspan="6">
                <!--                <input type="text" name="profession" id="profession" style="width: 120px">-->
                <input readonly="readonly" type="text" name="profession" id="profession"  style="width: 50%">
            </td>
        </tr>
        <!--        <tr>-->
        <!--            <th colspan="1" rowspan="10" style="width: 6%">缺陷信息</th> -->
        <!--        </tr>-->
        <tr>
            <th class="required" colspan="15">故障缺陷信息</th>
        </tr>
        <tr>
            <th class="required" colspan="2" style="width: 12%">缺陷类别</th>

            <td colspan="13" style="position: relative;text-align: left">
                <div id="zhezhao" style="width: 100%;height: 100%;background-color:#fff;position: absolute;top: 0;left: 0;opacity: 0;display: none"></div>
                <label><input type="radio" name="defectCategory" style="margin-left: 20px" id="defectCategory1" value="1" onchange="category_change(1)">液体渗漏（包含部件）</label>
                <label><input type="radio" name="defectCategory" id="defectCategory2" style="margin-left: 80px" value="2" onchange="category_change(2)">缺陷</label>
                <label><input type="radio" name="defectCategory" id="defectCategory3" style="margin-left: 80px" value="3" onchange="category_change(3)">一般</label>
                <label><input type="radio" name="defectCategory" id="defectCategory4" style="margin-left: 80px" value="4" onchange="category_change(4)">重大</label>
            </td>
        </tr>
        <tr>
            <th colspan="2" style="width: 12%">液体类型</th>
            <td colspan="13" style="text-align: left">
                <label><input class="fluid" type="radio" name="fluid" id="fluid1" style="margin-left: 20px" value="1">滑油</label>
                <label><input class="fluid" type="radio" name="fluid" id="fluid2" style="margin-left: 20px" value="2">燃油（不包括油箱漏油）</label>
                <label><input class="fluid" type="radio" name="fluid" id="fluid3" style="margin-left: 20px" value="3">液压油</label>
                <label><input class="fluid" type="radio" name="fluid" id="fluid4" style="margin-left: 20px" value="4">水</label>
            </td>
        </tr>
        <tr>
            <th colspan="2" style="width: 12%">缺陷类型</th>
            <td colspan="13"  style="text-align: left">
                <label><input class="fault" type="radio" name="fault" id="fault1" style="margin-left: 20px" value="1" onchange="fault_change()">结构</label>
                <label><input class="fault" type="radio" name="fault" id="fault2" style="margin-left: 20px" value="7" onchange="fault_change()">燃油箱渗漏</label>
                <label><input class="fault" type="radio" name="fault" id="fault3" style="margin-left: 20px" value="3" onchange="fault_change()">货舱装载配件</label>
                <label><input class="fault" type="radio" name="fault" id="fault4" style="margin-left: 20px" value="8" onchange="fault_change()">松散设备</label>
                <label><input class="fault" type="radio" name="fault" id="fault5" style="margin-left: 20px" value="9" onchange="fault_change()">工作推迟</label>
                <label><input class="fault" type="radio" name="fault" id="fault6" style="margin-left: 20px" value="6" onchange="fault_change()">其他</label>
                <input class="faultEasy" type="text" name="faultOther" id="faultOther">
            </td>
        </tr>
        <tr>
            <th colspan="2" style="width: 12%">故障类型</th>
            <td colspan="13"  style="text-align: left">
                <label><input class="defectType" type="radio" name="defectType" id="defectType1" style="margin-left: 20px" value="1" >正常故障</label>
                <label><input class="defectType" type="radio" name="defectType" id="defectType2" style="margin-left: 20px" value="2" >抢件保障</label>
                <label><input class="defectType" type="radio" name="defectType" id="defectType3" style="margin-left: 20px" value="3" >串件验证</label>
                <label><input class="defectType" type="radio" name="defectType" id="defectType4" style="margin-left: 20px" value="4" >磨损勤务</label>
                <label><input class="defectType" type="radio" name="defectType" id="defectType5" style="margin-left: 20px" value="5" >工作未完成</label>
                <label><input class="defectType" type="radio" name="defectType" id="defectType6" style="margin-left: 20px" value="6" >关联故障</label>
            </td>
        </tr>
        <tr>
            <th colspan="2" class="required">运行影响</th>
            <td colspan="14" style="text-align: left">
                <label><input type="radio" name="runningEffect"  id="runningEffect" style="margin-left: 20px" value="0" >地服影响项目</label>
                <label><input type="radio" name="runningEffect" id="runningEffect1" style="margin-left: 20px" value="1" >NO GO</label>
                <label><input type="radio" name="runningEffect" id="runningEffect2" style="margin-left: 20px" value="2" >无</label>
            </td>
        </tr>
        <tr>
            <th colspan="2" rowspan="3" class="required" style="width: 12%">缺陷描述</th>
            <td colspan="13" style="text-align: left">
                <label><input class="defect" id="elcas" name="elcas" onclick="eicas_change()" style="margin-left: 20px"
                              type="checkbox" value="1">EICAS信息</label>
                <input class="defectEasy" type="text" name="elcasDesc" id="elcasDesc">
                <!--                <label><input class="defect" type="checkbox" name="cockpit" id="cockpit" style="margin-left: 20px" value="1" onchange="cockpit_change()">驾驶舱效应</label>-->
                <!--                <input class="defectEasy" type="text" name="cockpitDesc" id="cockpitDesc">-->
            </td>
        </tr>
        <tr>
            <td colspan="2">飞行状态</td>
            <td colspan="11"  style="text-align: left">
                <label><input class="defect" type="radio" name="inFlight" id="inFlight1" style="margin-left: 20px" value="1">地面</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight2" style="margin-left: 20px" value="2">滑行</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight3" style="margin-left: 20px" value="3">起飞滑跑</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight4" style="margin-left: 20px" value="4">起飞离地</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight5" style="margin-left: 20px" value="5">爬升</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight6" style="margin-left: 20px" value="6">巡航</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight7" style="margin-left: 20px" value="7">下降</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight8" style="margin-left: 20px" value="8">五边进近</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight9" style="margin-left: 20px" value="9">着陆滑行</label>
                <label><input class="defect" type="radio" name="inFlight" id="inFlight10" style="margin-left: 20px" value="10">未知</label>
            </td>
        </tr>
        <!--        <tr> -->
        <!--            <td colspan="2" rowspan="2">飞机状态</td>-->
        <!--            <td colspan="2">-->
        <!--                <span>起落架位置&nbsp;</span><input class="defectEasy" type="text" name="underCart" id="underCart" style="width: 80px;">-->
        <!--            </td>-->
        <!--            <td colspan="4">-->
        <!--                襟翼位置&nbsp;&nbsp;&nbsp;<input class="defectEasy" type="text" name="flap" id="flap"  style="width: 80px; padding: 0">-->
        <!--                <input class="defectEasy" type="text" name="otherFlap" id="otherFlap" style="margin-left: 20px; width: 120px;">-->
        <!--            </td>-->
        <!--            <td colspan="1" style="width: 80px">防冰状态开-->
        <!--            </td>-->
        <!--            <td colspan="4">-->
        <!--                <label><input class="defect" type="checkbox" name="iceProof" id="iceProof" style="margin-left: 20px" value="1" onchange="iceProof_change()">发动机</label>-->
        <!--                <label><input class="defect" type="checkbox" name="iceProof1" id="iceProof1" style="margin-left: 20px" value="2" onchange="iceProof_change()">大翼</label>-->
        <!--                <label><input class="defect" type="checkbox" name="iceProof2" id="iceProof2" style="margin-left: 20px" value="3" onchange="iceProof_change()">未知</label>-->
        <!--            </td>-->
        <!--        </tr>-->
        <!--        <tr>-->
        <!--            <td colspan="2" style="width: 80px">-->
        <!--                自动驾驶-->
        <!--            </td>-->
        <!--            <td colspan="4" >-->
        <!--                <input class="defectEasy" type="text" name="autoPilot" id="autoPilot" style="width: 80px; padding: 0">-->
        <!--                <input class="defectEasy" type="text" name="autoYes" id="autoYes" style="width: 80px; padding: 0">-->
        <!--                <input class="defectEasy" type="text" name="navigate" id="navigate" style="width: 80px; padding: 0">-->
        <!--            </td>-->
        <!--            <td colspan="1" style="width: 80px">自动油门-->
        <!--            </td>-->
        <!--            <td colspan="4">-->
        <!--                <input class="defectEasy" type="text" name="autoSelect" id="autoSelect"  style="width: 80px; padding: 0">-->
        <!--                <input class="defectEasy" type="text" name="selectValue" id="selectValue"  style="width: 80px; padding: 0">-->
        <!--            </td>-->
        <!--        </tr>-->
        <tr>
            <!--            <td colspan="2" style="width: 12%" class="required">缺陷描述</td>-->
            <td colspan="15" class="cell-high"><textarea id="description" name="description" maxlength="1000" style="height: 100%;width: 100%;resize: none;"></textarea></td>
        </tr>
        <tr>
            <th colspan="2" class="cell-high required">WorkLog</th>
            <td colspan="14"><textarea id="workLog" name="workLog" maxlength="1000" style="height: 100%;width: 100%;resize: none;"></textarea></td>
        </tr>
        <tr>
            <th colspan="2" class="cell-high">TROUBLE ANALYSIS</th>
            <td colspan="14"><textarea id="analysis" name="analysis" maxlength="1000" style="height: 100%;width: 100%;resize: none;"></textarea></td>
        </tr>

        <tr>
            <th colspan="2" class="cell-high">交接备注</th>
            <td colspan="14"><textarea id="remark" name="remark" maxlength="1000" style="height: 100%;width: 100%;resize: none;"></textarea></td>
        </tr>
        <tr>
            <th colspan="2" >ATTACH PATH</th>
            <td colspan="14" id="upload">ATTACH PATH</td>
        </tr>
    </table>
</form>

<div class="foot-btns">
    <!-- <a id="upload_button" class="searchBtn" type="button" onclick="open_upload()" data-options="iconCls:'icon-clear'" style="margin-right: 10px;">
        <span data-i18n="common:COMMON_OPERATION.UPLOAD"></span>
    </a> -->
    <a class="searchBtn" type="button" onclick="save(this)" data-options="iconCls:'icon-clear'" style="margin-right: 10px;">
        <span data-i18n="common:COMMON_OPERATION.SAVE"></span>
    </a>
    <a class="ridoBtn" type="button" onclick="close_window()" data-options="iconCls:'icon-clear'">
        <span data-i18n="common:COMMON_OPERATION.CANCEL"></span>
    </a>
</div>
</body>
<script type="text/javascript" src="/js/datagrid_utils.js"></script>
<script type="text/javascript" src="/js/upload_file.js"></script>
<script type="text/javascript">
    const params = getParentParam_();
    const operation = params.operation;
    const ininData = params.rowData;
    // const userName = getLoginInfo().userName;
    // const userId = getLoginInfo().userId;
    var global_data = {
        acId: "",
        acReg: "",
        ata: "",
        dateFound: "",
        defectId: "",
        model: '',
        creatTime: ""
    };

    const plateau_flight = {"B-2840": 1, "B-2845": 1, "B-2839": 1};

    //专业
    const profession_option = [{
        value: "1",
        text: "电子",
    }, {
        value: "2",
        text: "电气",
    }, {
        value: "3",
        text: "机械",
    }, {
        value: "4",
        text: "动力",
    }, {
        value: "5",
        text: "其他",
    }];

    //起落架位置
    const underCart_option = [{
        value: "1",
        text: "收上",
    }, {
        value: "2",
        text: "放下",
    }, {
        value: "3",
        text: "未知",
    }];
    //襟翼位置
    const flap_option = [{
        value: "1",
        text: "收上",
    }, {
        value: "2",
        text: "放下",
    }, {
        value: "3",
        text: "未知",
    }];

    //自动驾驶1
    const autoPilot_option = [{
        value: "1",
        text: "是",
    }, {
        value: "2",
        text: "否",
    }, {
        value: "3",
        text: "未知",
    }];

    //自动驾驶2
    const autoYes_option = [{
        value: "1",
        text: "左",
    }, {
        value: "2",
        text: "中",
    }, {
        value: "3",
        text: "右",
    }, {
        value: "4",
        text: "进近",
    }, {
        value: "5",
        text: "未知",
    }];

    //自动驾驶3
    const navigate_option = [{
        value: "1",
        text: "垂直导航",
    }, {
        value: "2",
        text: "水平导航",
    }, {
        value: "3",
        text: "未知",
    }];

    //自动油门1
    const autoSelect_option = [{
        value: "1",
        text: "是",
    }, {
        value: "2",
        text: "否",
    }, {
        value: "3",
        text: "未知",
    }];

    //自动油门2
    const selectValue_option = [{
        value: "1",
        text: "推力",
    }, {
        value: "2",
        text: "速度",
    }, {
        value: "3",
        text: "未知",
    }];

    //底部上传按钮打开上传页面
    function open_upload(){
        var title_ = $.i18n.t('common:COMMON_OPERATION.UPLOAD');
        let param = {
            cat: "defect",//文件夹
            sourceId: params.rowData.id,//
            successCellBack: "",
            fialCellBack: ""
        };
        ShowWindowIframe({
            width: "1000",
            height: "700",
            title: title_,
            param: param,
            url: "/views/data_manager/dm/upload/attachment_add.shtml"
        });
    }

    function reload_(){
        $("#attachmengtList").empty();
        InitDataGrid(params.rowData.id, "defect")
    }



    //底部保存按钮点击事件
    function save(thiz){
        const that = thiz;
        $(that).addClass('noPoint');

        let post_data = get_post_data();
        post_data.profession=$("#profession").textbox("getValue");

        if(!check_required(post_data)){
            $(that).removeClass('noPoint');
            return
        }

        let url = "";
        if(params.operation == "add"){
            url = "/api/v1/worklog/save"
        }else if(params.operation == "edit"){
            url = "/api/v1/worklog/update";
        }
        axios.post(url, post_data).then(response=>{
            $(that).removeClass('noPoint');
            if(response.data.msg.indexOf("SUCCESS") != -1){
                if(typeof params.successCallback == "function") params.successCallback();
                close_window()
            }else if(response.data.msg.indexOf("ERROR") != -1){
                if (response.data.msgData && response.data.msgData[0]) {
                    throw new Error(response.data.msgData[0]);
                } else if (response.data.data) {
                    throw new Error(response.data.data);
                } else {
                    throw new Error("查询数据失败");
                }
            }
        }).catch(err=>{
            $(that).removeClass('noPoint');
            MsgAlert({type: "error", content: "保存失败" + err.message});
        })
    }

    //底部关闭按钮点击事件
    function close_window(){
        window.opener=null;
        window.open('','_self');
        window.close();
    }

    //收集将要提交的数据
    function get_post_data(){

        let post_data = $("#addWorklog").serializeObject();
        if(Array.isArray(post_data.inFlight)){
            post_data.inFlight = post_data.inFlight.join(",")
        }
        if(Array.isArray(post_data.runningEffect)){
            post_data.runningEffect = post_data.runningEffect.join(",")
        }

        post_data.attachmentIds = $("#upload").UPLOAD("saveData")[0].uploadAttaIds;

        post_data.defectId = params.defectId;
        post_data.serialNo = global_data.serialNo;
        post_data.station = $("#station").text();
        if (post_data.noDefect === "on") {
            delete post_data.noDefect;
            post_data.relatedDefectNo = "noDefectNo"
        }else{
            delete post_data.noDefect;
        }
        if(!!params.id){
            post_data.id = params.id
        }
        if (null != post_data.dateFound) {
            post_data.dateFound = new Date(post_data.dateFound);
        }
        return post_data

    }


    //检查必填
    function check_required(data){
        try{
            if(!data.workLog){
                throw {selector: "#workLog", text: "workLog不能为空"}
            }
            if(!data.status){
                throw {selector: "", text: "status必须选择"}
            }
            if(!data.runningEffect){
                throw {selector: "", text: "运行影响必须选择"}
            }
            if(!data.profession){
                throw {selector: "", text: "专业不能为空"}
            }
            if(global_data.first){
                if(!$("#addWorklog").form("validate")){
                    throw {selector: "", text: "请完善必填项!"};
                }
                if(!data.defectCategory){
                    throw {selector: "#defectCategory", text: "缺陷类别必须选择"}
                }
                if(!data.description){
                    throw {selector: "#description", text: "缺陷描述不能为空"}
                }
                if(!data.workLog){
                    throw {selector: "#workLog", text: "workLog不能为空"}
                }
                if(!data.status){
                    throw {selector: "", text: "status必须选择"}
                }
                if(data.defectCategory == 1 && !data.fluid){
                    throw {selector: "#fluid", text: "液体类型必须选择"}
                }
                if(data.defectCategory == 2 && !data.fault){
                    throw {selector: "#fault", text: "缺陷类型必须选择"}
                }
                if( (data.defectCategory == 3 || data.defectCategory == 4) && !data.inFlight){
                    throw {selector: "#inFlight", text: "飞行状态必须选择"}
                }
            }
        }
        catch(err){
            if($(err.selector)){
                $(err.selector).focus();
            }
            MsgAlert({type: "error", content: err.text});
            return false
        }
        return true
    }

    /**
     * 通过toAddOrEdit返回的数据对页面进行初始化数据渲染
     * @param  {page_data} page_data 查询接口返回的数据
     */
    function init_data(page_data){
        //defect base info部分, add 和 edit 模式均要加载
        global_data.acReg = page_data.defectBaseInfo.acReg;
        global_data.ata = page_data.defectBaseInfo.ata;
        global_data.dateFound = page_data.defectBaseInfo.dateFound;
        global_data.first = page_data.first;
        global_data.model = page_data.defectBaseInfo.model;
        global_data.creatTime = page_data.defectBaseInfo.creatTime;
        /*if(page_data.defectWorkLogVo){
            global_data.defectId = page_data.defectWorkLogVo.defectId;
        }*/
        $("#model").html(page_data.defectBaseInfo.model||"");
        $("#station").text(page_data.defectBaseInfo.station);
        $("#dateFound").text(formatterDate(new Date(page_data.defectBaseInfo.dateFound)));
        if(!page_data.first || ( page_data.first && !!page_data.defectWorkLogVo)){
            $("#ata").textbox("setValue", page_data.defectBaseInfo.ata);
            if (page_data.defectWorkLogVo) {
                $("#ata").textbox("setValue", page_data.defectWorkLogVo.ata);
            };
            professionalData($("#ata").textbox("getValue").slice(0,2));
            defectTypelimit($("#ata").textbox("getValue").slice(0,4));
        };

        $("#rewiewType").text(page_data.defectBaseInfo.rewiewType|| "");
        $("#description").text(page_data.defectBaseInfo.description|| "");
        //控制状态选项
        $("input[name='status']").removeAttr("checked");
        if(page_data.defectWorkLogVo && page_data.defectWorkLogVo.id) {
            if(page_data.defectWorkLogVo.status == "O") {
                $("#statusO").parent().show();
                $("#statusM").parent().hide();
                $("#statusC").parent().hide();
                $("#statusO").prop("checked", true);
            } else if(page_data.defectWorkLogVo.status == "C") {
                $("#statusO").parent().hide();
                $("#statusM").parent().hide();
                $("#statusC").parent().show();
                $("#statusC").prop("checked", true);
            } else if(page_data.defectWorkLogVo.status == "M") {
                $("#statusO").parent().hide();
                $("#statusM").parent().show();
                $("#statusC").parent().hide();
                $("#statusM").prop("checked", true);
            }
        } else {
            if(page_data.showStatusType == 1) {
                $("#statusO").parent().show();
                $("#statusM").parent().hide();
                $("#statusC").parent().hide()
            } else if(page_data.showStatusType == 2) {
                $("#statusM").parent().show();
                $("#statusO").parent().hide();
                $("#statusC").parent().hide()
            } else if(page_data.showStatusType == 3) {
                $("#statusM").parent().show();
                $("#statusC").parent().show();
                $("#statusO").parent().hide()
            } else if(page_data.showStatusType == 4) {
                $("#statusC").parent().show();
                $("#statusO").parent().hide();
                $("#statusM").parent().hide()
            }
        }
        if(params.statusO=="O"){
            $("#statusO").prop("checked", true);
        }
        if (page_data.defectBaseInfo.isStructureDamage=='y'){
            $("#statusM").parent().hide();
        }
        if(params.operation == "edit" || (params.operation == "add" && !page_data.first)){
            //worklog 部分数据,  edit 和 非第一条新增模式需要加载
            global_data.serialNo = page_data.defectWorkLogVo.serialNo;
            //处理defectNo
            if(page_data.defectWorkLogVo.relatedDefectNo == "noDefectNo"){
                $('#noDefect').attr("checked", "checked");
                $('#relatedDefectNo').textbox("disable")
            }else{
                $('#relatedDefectNo').textbox("setValue", page_data.defectWorkLogVo.relatedDefectNo);
            }
            //缺陷类别
            $(`input[name='defectCategory'][value='${page_data.defectWorkLogVo.defectCategory}']`).prop("checked", true);
            //故障类别
            $(`input[name='defectType'][value='${page_data.defectWorkLogVo.defectType}']`).prop("checked", true);
            category_change(page_data.defectWorkLogVo.defectCategory);
            //运行影响
            $(`input[name='runningEffect'][value='${page_data.defectWorkLogVo.runningEffect}']`).prop("checked", true);
            if(!page_data.first){
                effect_change();
            }
            //液体类型
            $(`input[name='fluid'][value='${page_data.defectWorkLogVo.fluid}']`).prop("checked",1);
            //缺陷类型
            $(`input[name='fault'][value='${page_data.defectWorkLogVo.fault}']`).prop("checked", true);
            $("#faultOther").textbox('setValue', page_data.defectWorkLogVo.faultOther);

            $(`input[name='elcas'][value='${page_data.defectWorkLogVo.elcas}']`).prop("checked", true);
            $("#elcasDesc").textbox("setValue", page_data.defectWorkLogVo.elcasDesc);
            $(`input[name='cockpit'][value='${page_data.defectWorkLogVo.cockpit}']`).prop("checked", true);
            $("#cockpitDesc").textbox("setValue", page_data.defectWorkLogVo.cockpitDesc);
            $(`input[name='inFlight'][value='${page_data.defectWorkLogVo.inFlight}']`).prop("checked", true);
            $("#underCart").combobox("select", page_data.defectWorkLogVo.underCart);
            $("#flap").combobox("select", page_data.defectWorkLogVo.flap);
            $("#otherFlap").textbox("setValue", page_data.defectWorkLogVo.otherFlap);
            $("#autoPilot").combobox("select", page_data.defectWorkLogVo.autoPilot);
            $("#autoYes").combobox("select", page_data.defectWorkLogVo.autoYes);
            $("#navigate").combobox("select", page_data.defectWorkLogVo.navigate);
            $("#autoSelect").combobox("select", page_data.defectWorkLogVo.autoSelect);
            $("#selectValue").combobox("select", page_data.defectWorkLogVo.selectValue);
            $(`input[name='iceProof'][value='${page_data.defectWorkLogVo.iceProof}']`).prop("checked", true);
            $(`input[name='iceProof1'][value='${page_data.defectWorkLogVo.iceProof1}']`).prop("checked", true);
            $(`input[name='iceProof2'][value='${page_data.defectWorkLogVo.iceProof2}']`).prop("checked", true);
            $("#description").val(page_data.defectWorkLogVo.description);

            if(params.operation != "add"){
                //新增时不带入这四条数据
                $("#workLog").text(page_data.defectWorkLogVo.workLog);
                $("#analysis").val(page_data.defectWorkLogVo.analysis);
                $("#remark").val(page_data.defectWorkLogVo.remark);
                page_data.defectWorkLogVo.runningEffect.split(",").forEach(item=>{
                    $(`input[name='runningEffect'][value='${item}']`).attr("checked", "checked")
                })
            }
            if(page_data.toNrcFlag){
                $('#zhezhao').css('display','block')
            }
            if(page_data.first){
                //第一个worklog基本信息可以编辑,取消初始化时的禁用
                if(page_data.defectWorkLogVo.fault == 6){
                    $("#faultOther").textbox('enable')
                }
                if(page_data.defectWorkLogVo.elcas == 1){
                    $("#elcasDesc").textbox("enable")
                }
                if(page_data.defectWorkLogVo.cockpit == 1){
                    $("#cockpitDesc").textbox("enable")
                }

            }else{
                //非第一个基本信息不可以编辑
                //关联的故障编号、ATA、专业、缺陷信息（包括：缺陷类别、液体类型、缺陷类型、故障属性和缺陷描述），修改编辑只允许在第1个WorkLog修改，其他WorkLog只带出信息，不允许修改
                //故障编号、ATA、专业
                $("#ata").textbox("readonly",true);
                // $("#profession").textbox("readonly",true);
                $("#noDefect").attr("disabled", "disabled");
                $("#relatedDefectNo").textbox("readonly",true);
                //缺陷类别
                $("input[name='defectCategory']").attr("readonly",true);
                $("input[name='defectCategory']").attr("disabled", 'disabled');
                $(`input[name='defectCategory'][value='${page_data.defectWorkLogVo.defectCategory}']`).attr("disabled", false);

                //故障类别
                $("input[name='defectType']").attr("readonly",true);
                $("input[name='defectType']").attr("disabled", 'disabled');
                $(`input[name='defectType'][value='${page_data.defectWorkLogVo.defectType}']`).attr("disabled", false);
                //缺陷描述
                $("#description").attr("readonly", "readonly");
                //液体类型
                $("input[name='fluid']").attr("readonly",true);
                $("input[name='fluid']").attr("disabled", 'disabled');
                $(`input[name='fluid'][value='${page_data.defectWorkLogVo.fluid}']`).attr("disabled", false);
                //缺陷类型
                $("input[name='fault']").attr("readonly",true);
                $("input[name='fault']").attr("disabled", 'disabled');
                $(`input[name='fault'][value='${page_data.defectWorkLogVo.fault}']`).attr("disabled", false);
                $(`input[name='inFlight']`).attr("disabled", 'disabled');
                $(`input[name='inFlight'][value='${page_data.defectWorkLogVo.inFlight}']`).attr("disabled", false);
                $("#faultOther").textbox("readonly",true);
                //故障属性
                $("input[class='defect']").attr("readonly",true);
                $(`input[name='elcas'][value='${page_data.defectWorkLogVo.elcas}']`).click(function () {
                    return false
                });
                $(`input[name='cockpit'][value='${page_data.defectWorkLogVo.cockpit}']`).click(function () {
                    return false
                });

                $(`input[name^='iceProof']`).click(function () {
                    return false
                });


                $(".defectEasy").textbox("readonly",true)
            }
        }

        if(page_data.first && params.operation != "edit"){
            $("#description").val(page_data.defectBaseInfo.faultReportChn)
            //如果是结构类第一次建worklog 则缺陷类别默认为缺陷，液体类型默认为结构
            if(page_data.defectBaseInfo.isStructureDamage=='y'){

                //缺陷类别
                $(`input[name='defectCategory'][value='2']`).prop("checked", true);
                category_change(2);
                //缺陷类型
                $(`input[name='fault'][value='1']`).prop("checked", true);
            }
        }
        if(params.operation == "edit"){

            // $("#faultOther").textbox({});
            // $("#elcasDesc").textbox({});
            // $("#cockpitDesc").textbox({});
            // $("#otherFlap").textbox({})

            let attData = {};
            attData.attachments = page_data.defectWorkLogVo.attachments;
            attData.attachmentIds = page_data.defectWorkLogVo.attachmentIds;
            $("#upload").UPLOAD("editData",attData);
        }
        if (params.operation == "add"){
            $("#upload").UPLOAD("create");
        }

    }

    function profession_value(val) {

        if(val==1){
            $("#profession").textbox("setValue",val);
            $("#profession").textbox("setText","电子");
        }else if(val==2){
            $("#profession").textbox("setValue",val);
            $("#profession").textbox("setText","电气");
        }else if(val==3){
            $("#profession").textbox("setValue",val);
            $("#profession").textbox("setText","机械");
        }else if(val==4){
            $("#profession").textbox("setValue",val);
            $("#profession").textbox("setText","动力");
        }
    }

    //初始化渲染easyui组件
    function init_page(data){
        $('#relatedDefectNo').textbox({
            required: true,
            editable: false,
            icons: [{
                iconCls:'icon-search',
                handler: function(e){
                    checkDefectNo(global_data.acReg, global_data.ata, global_data.creatTime)
                }
            }]
        });
        $("#profession").textbox();
        $("#underCart").combobox({
            data: underCart_option,
            panelHeight:'auto',
            valueField: 'value',
            textField: 'text',
            editable: false,
        });
        $("#flap").combobox({
            data: flap_option,
            panelHeight:'auto',
            valueField: 'value',
            textField: 'text',
            editable: false,
            onSelect: (item)=>{
                if(!item) return;
                if(item.value == "3" || item.value == "1"){
                    $("#otherFlap").textbox("clear");
                    $("#otherFlap").textbox("disable")
                }else{
                    $("#otherFlap").textbox("clear");
                    $("#otherFlap").textbox("enable")
                }
            }
        });
        $("#autoPilot").combobox({
            data: autoPilot_option,
            panelHeight:'auto',
            valueField: 'value',
            textField: 'text',
            editable: false,
            onSelect: item=>{
                if(!item) return;
                $("#autoYes").combobox("clear");
                $("#navigate").combobox("clear");
                $("#autoSelect").combobox("clear");
                $("#selectValue").combobox("clear");
                if(item.value == 3 || item.value == 2){
                    $("#autoYes").combobox("disable");
                    $("#navigate").combobox("disable");
                    $("#autoSelect").combobox("disable");
                    $("#selectValue").combobox("disable")
                }else{
                    $("#autoYes").combobox("enable");
                    $("#navigate").combobox("enable");
                    $("#autoSelect").combobox("enable");
                    $("#selectValue").combobox("enable")
                }
            }
        });
        $("#autoYes").combobox({
            data: autoYes_option,
            panelHeight:'auto',
            valueField: 'value',
            textField: 'text',
            editable: false,
            onSelect: item=>{
                if(!item) return;
                $("#navigate").combobox("clear");
                if(item.value == 5){
                    $("#navigate").combobox("disable");
                }else{
                    $("#navigate").combobox("enable");
                }
            }
        });
        $("#navigate").combobox({
            data: navigate_option,
            panelHeight:'auto',
            valueField: 'value',
            textField: 'text',
            editable: false,
        });
        $("#autoSelect").combobox({
            data: autoSelect_option,
            panelHeight:'auto',
            valueField: 'value',
            textField: 'text',
            editable: false,
            onSelect: item=>{
                if(!item) return;
                $("#selectValue").combobox("clear");
                if(item.value == 3 || item.value == 2){
                    $("#selectValue").combobox("disable");
                }else{
                    $("#selectValue").combobox("enable");
                }
            }
        });
        $("#selectValue").combobox({
            data: selectValue_option,
            panelHeight:'auto',
            valueField: 'value',
            textField: 'text',
            editable: false,
        });
        $("#faultOther").textbox({
            disabled: true
        });
        $("#elcasDesc").textbox({});
        $("#cockpitDesc").textbox({});
        $("#otherFlap").textbox({});

        category_change(5)
    }


    //章节专业信息
    function professionalData(data){
        if(!!data && data.length == 2){
        $.ajax({
            type: "GET",
            url: "/api/v1/plugins/GET_DEFECT_WORK_LOG_PROFESSION?ata="+data,
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (data) {
                if(data.data){
                    profession_value(data.data.VALUE);
                }else {
                    $("#profession").textbox("setValue","");
                    alert("需要维护对应章节的专业信息!")
                }

            },
            error: function () {
                window.alert("失败！");
            }
        });
        }
    };

    /**
     * 打开故障选择弹窗, 过滤条件：1、飞机号相同；2、dateFound 180天以内
     * @param  {String} acReg     飞机号
     * @param  {String} ata       ata
     * @param  {Date} creatTime creatTime
     */
    function checkDefectNo(acReg, ata, creatTime) {
        //var defectId = $("[name='defectWorkLog.defectId']").val();
        var defectId = params.defectId;
        var date = new Date(), s = "";
        date.setDate(date.getDate() - 180);
        s += date.getFullYear() + "-";
        s += (date.getMonth() + 1) + "-";
        s += date.getDate();
        s += " 00:00:00";
        var ataStr = ata.substring(0, 2);
        var ataS = "lower(this_.ATA) like \'" + ataStr + "%\'";
        var excludeDefectNo = "this_.defect_no not in (select t.RELATED_DEFECT_NO from T_DEFECT_BASE_INFO t where t.RELATED_DEFECT_NO is not null and t.RELATED_DEFECT_NO !='无')";
        var defaultParam = {
            "qname": ["acReg", "ata", "dateFound", "id", "creatTime", ""],
            "qoperator": ["equals", "sql", "ge", "notEquals", "l", "sql"],
            "qvalue": [acReg, ataS, s, defectId, new Date(creatTime).Format("yyyy-MM-dd hh:mm:ss"), excludeDefectNo]
        };
        queryDefectDialog(defaultParam, function (rowdata, originalData, dlg) {
            //故障单ID
            var defectId = originalData.id;
            //故障单编号
            var defectNo = originalData.defectNo;
            //model
            var model = originalData.model;
            //飞机编号
            var acNo = originalData.acReg;
            //ata
            var ata = originalData.ata;
            //global_data.defectId = defectId;
            $("#relatedDefectNo").textbox("setValue", defectNo);
            $("#relatedDefectNo").trigger("blur");
            dlg.close();
        });
    }

    //编辑时获取基本信息
    function get_data(){
        let url = "/api/v1/worklog/toAddOrEdit";
        let form = new FormData();
        let defectId = params.defectId;
        form.append('defectId', defectId);
        if(!!params.id){
            form.append('id', params.id);
        } else {
            form.append('id', '');
        }
        let opt = {};
        opt.headers = {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
        };
        axios.post(url, form, opt).then(response=>{
            if(response.data.msg.toUpperCase().indexOf("SUCCESS") != -1){
                init_data(response.data.data)
            }else if(response.data.msg.indexOf("ERROR") != -1){
                throw new Error("查询基本信息失败")
            }
        }).catch(err=>{
            MsgAlert({type: "error", content: err})
        })
    }

    /**
     * category改变时控制页面
     * @param  {Number} index category改变时的选中项
     * @return {[type]}       [description]
     */
    function category_change(index){
        console.log(index);
        if(index == 1){
            //选中"液体渗漏"
            $(".fluid").removeAttr("disabled");

            $(".fault").attr("disabled", "disabled");
            $(".fault").removeAttr("checked");
            $(".faultEasy").textbox("clear");
            $(".faultEasy").textbox("disable");

            $(".defect").attr("disabled", "disabled");
            $(".defect").removeAttr("checked");
            $(".defectEasy").textbox("clear");
            $(".defectEasy").textbox("disable");
            $("#description").removeAttr("readonly")

            $(".defectType").attr("disabled", "disabled");
            $(".defectType").removeAttr("checked");
        }else if(index == 2){
            //选中"缺陷"
            $(".fault").removeAttr("disabled");

            $(".faultEasy").textbox("enable");

            $(".fluid").removeAttr("checked");
            $(".fluid").attr("disabled", "disabled");

            $(".defect").attr("disabled", "disabled");
            $(".defect").removeAttr("checked");
            $(".defectEasy").textbox("clear");
            $(".defectEasy").textbox("disable");
            $("#description").removeAttr("readonly");
            //"其他"框禁用
            $("#faultOther").textbox("disable")

            $(".defectType").attr("disabled", "disabled");
            $(".defectType").removeAttr("checked");
        }else if(index == 3 || index == 4){
            //选中"故障(一般、重大)"
            $(".defectType").removeAttr("disabled");
            $(".defect").removeAttr("disabled");
            $(".defectEasy").textbox("enable");
            $(".fluid").removeAttr("checked");
            $(".fluid").attr("disabled", "disabled");

            $(".fault").attr("disabled", "disabled");
            $(".fault").removeAttr("checked");
            $(".faultEasy").textbox("clear");
            $(".faultEasy").textbox("disable");
            $("#description").removeAttr("readonly");
            //"其他"框禁用
            //todo disabled禁用后 保存时form取不到值，造成除第一个worklog外点击保存无法获取到值  设置readonly即可
            // $("#elcasDesc").textbox("disable");
            // $("#cockpitDesc").textbox("disable")
        }else{
            $(".fluid").removeAttr("checked");
            $(".fluid").attr("disabled", "disabled");

            $(".fault").attr("disabled", "disabled");
            $(".fault").removeAttr("checked");
            $(".faultEasy").textbox("clear");
            $(".faultEasy").textbox("disable");

            $(".defect").attr("disabled", "disabled");
            $(".defect").removeAttr("checked");
            $(".defectEasy").textbox("clear");
            $(".defectEasy").textbox("disable");
            $("#description").attr("readonly", "readonly")
        }
    }

    /**
     * running effect改变时的控制
     * 选择了地服影响项目或NO GO不能选择无，反之一样
     * @param  {Number} index 编号
     */
    function effect_change(index){
        if( $("#runningEffect").prop("checked") ){
            $("#runningEffect2").attr("disabled", "disabled");
            $("#runningEffect1").attr("disabled", "disabled")
        }
        if( $("#runningEffect1").prop("checked") ){
            $("#runningEffect").attr("disabled", "disabled");
            $("#runningEffect2").attr("disabled", "disabled")
        }
        if( $("#runningEffect2").prop("checked") ){
            $("#runningEffect").attr("disabled", "disabled");
            $("#runningEffect1").attr("disabled", "disabled")
        }
    }

    /**
     * 逻辑同effect_change
     */
    function iceProof_change(index){
        if( $("#iceProof2").prop("checked") ){
            // $("#runningEffect").removeAttr("checked")
            // $("#runningEffect1").removeAttr("checked")
            $("#iceProof").attr("disabled", "disabled");
            $("#iceProof1").attr("disabled", "disabled")
        }else{
            $("#iceProof").removeAttr("disabled");
            $("#iceProof1").removeAttr("disabled")
        }

        if( $("#iceProof").prop("checked") || $("#iceProof1").prop("checked") ){
            // $("#runningEffect2").removeAttr("checked")
            $("#iceProof2").attr("disabled", "disabled")
        }else{
            $("#iceProof2").removeAttr("disabled")
        }
    }

    function nodefect_change(){
        if($("#noDefect").prop("checked")){
            $("#relatedDefectNo").textbox({required: false, disabled: true, value: ""})
        }else{
            $("#relatedDefectNo").textbox({required: true, disabled: false})
        }
    }

    function fault_change(){
        $("#faultOther").textbox("clear");
        if( $("#fault6").prop("checked") ){
            $("#faultOther").textbox("enable")
        }else{
            $("#faultOther").textbox("disable")
        }
    }

    function eicas_change(){
        if (global_data.model == 'B737') {
            event.preventDefault();
            MsgAlert({type: "error", content: "737飞机不能选择EICAS"});
            return false
        }
        if (!global_data.first) {
            return false
        }
        $("#elcasDesc").textbox("clear");
        if( $("#elcas").prop("checked") ){
            $("#elcasDesc").textbox("enable")
        }else{
            $("#elcasDesc").textbox("disable");
        }
    }

    function cockpit_change(){
        if (!global_data.first) {
            return false
        }
        $("#cockpitDesc").textbox("clear");
        if( $("#cockpit").prop("checked") ){
            $("#cockpitDesc").textbox("enable")
        }else{
            $("#cockpitDesc").textbox("disable")
        }
    }

    /** 添加必填标志 **/
    function add_require(){
        $(".required").append("<span style='color: red'>*</span>");
    }

    $(function(){
        add_require();
        init_page();
        get_data();
        // selectAta();
        ataSelectInit("hideTips");
    })

    // //查询数据
    // // var ataData = [];
    // var hadAta = "";
    // function getAtaData() {
    //     //这里必须使用两种取值方式，getValue取值是选择组件里包含的真实值，getText是组件里的显示的值
    //     //正常输入两个值相等，当使用上下键选择的时候就会出现不同的结果
    //     var ata = $("#ata").textbox("getValue");
    //     var ataText = $('#ata').combobox('getText');
    //     if(ata.length > 1 && ataText.length<7){
    //         //hadAta用来在第二次输入数据库不存在的章节号的时候，组件会清空输入框的情况下进行重新赋值
    //         if(ataText.length >3){
    //             hadAta = ataText.slice(0,4);
    //         }else {
    //             hadAta = "";
    //         };
    //         $.ajax({
    //             type: "POST",
    //             url: "/api/v1/ata/selectAta6?chapter="+ata,
    //             contentType: "application/json;charset=utf-8",
    //             dataType: "json",
    //             success: function (data) {
    //                 if(!!data.data && data.data.length>0){
    //                     var getData = data.data;
    // var ataData = [];
    //                    for(var i=0;i<getData.length;i++){
    //                        var labelValue = {};
    //                        labelValue.label = getData[i].chapter + getData[i].section +getData[i].subject+" "+ getData[i].description;
    //                        labelValue.value = getData[i].chapter + getData[i].section;
    //                        ataData.push(labelValue);
    //                    };
    //                     $('#ata').combobox('loadData',ataData);
    //                 }else {
    //                     // $("#ata").combobox("clear");
    //                     $('#ata').combobox('loadData',[]);
    //                 }
    //             },
    //             error: function () {
    //                 window.alert("系统出错，请联系系统管理员。");
    //             }
    //         });
    //     }else if(ataText.length<2){
    //         if(ataText.length == 1){
    //             hadAta = "";
    //         };
    //         var ataData=[] ;
    //         $('#ata').combobox('loadData',ataData);
    //     }
    //
    // }
    //
    // //章节下拉数据预备
    // var oldData = '';
    // function selectAta() {
    //     var ataSelect = "";
    //     $("#ata").combobox({
    //         // editable: true,
    //         required: true,
    //         data:[],
    //         panelHeight: 160,
    //         valueField: 'value',
    //         textField: 'label',
    //         width:400,
    //         hasDownArrow:true,
    //         //在选择的时候做操作
    //         onSelect: (data) => {
    //             $("#ata").textbox("setValue", data.value);
    //             defectTypelimit(data.value);
    //         },
    //         onLoadSuccess : () => {
    //             if(!!ataSelect){
    //                 $("#ata").textbox("setValue", ataSelect);
    //                 ataSelect = "";
    //             }
    //         },
    //         onChange:()=>{
    //             ataSelect = $("#ata").textbox("getValue");
    //             //用来根据输入查询修改专业数据
    //             if(ataSelect.length == 4 && oldData !=ataSelect ){
    //                 oldData =ataSelect;
    //                 var twoAta = ataSelect.slice(0,2);
    //                 setTimeout(function () {
    //                     professionalData(twoAta);
    //                 },400)
    //             };
    //             getAtaData();
    //         }
    //     });
    //     $("#ata").next("span").children("input:first").blur(function () {
    //         //如果不是选中的
    //         setTimeout(function(){
    //             var ataNow = $("#ata").textbox("getValue");
    //                 if(!!global_data.first && ataNow.length>3){
    //                 $("#ata").textbox("setValue", ataNow.slice(0,4));
    //                 defectTypelimit( ataNow.slice(0,4));
    //             }if(ataNow.length<4){
    //                 $("#ata").textbox("setValue", "");
    //                 lostLimit();
    //             }
    //         },300);
    //     });
    //     //解决当用户输入一个正确的四位章节号后，点击回车键出现输入框带入描述的问题
    //     $("#ata").next("span").children("input:first").keydown(function () {
    //         if(event.keyCode == "13") {
    //             //或操作hadAta主要解决当纯输入四位数据库不存在的章节号的时候，按下回车键内容被清空的问题
    //             var ataNow = $("#ata").combobox('getText')||hadAta;
    //             if(ataNow.length>3){
    //                 $("#ata").textbox("setValue", ataNow.slice(0,4));
    //                 defectTypelimit( ataNow.slice(0,4));
    //             }
    //         }
    //     })
    // }
    /**
     *
     * */
    var ataData=[] ;
    function ataDataSearch(){
        //这里必须使用两种取值方式，getValue取值是选择组件里包含的真实值，getText是组件里的显示的值
        //正常输入两个值相等，当使用上下键选择的时候就会出现不同的结果
        var model = $("#model").html() || "";
        var ata = $("#ata").textbox("getValue");
        var ataText = $('#ata').combobox('getText');
        //根据按上下键选择选项的时候，输入框一定超过4个字符的特性，防止在选择的时候进行搜索
        if(ata.length > 1 && ataText.length<5) {
            $.ajax({
                url: "/api/v1/ata/selectBmManualAtaByFleetAndAta?fleet=" + model + "&ata=" + ata + "&engine=",
                dataType: "json",
                contentType: 'application/json;charset=utf-8',
                type: 'POST',
                // data: postData,
                async: true,
                cache: false,
                success: function (obj, textStatus) {
                    var getData = obj.data;
                    ataData = [];
                        for(var i=0;i<getData.length;i++){
                            var labelValue = {};
                        if(!!getData[i].companyCode && getData[i].companyCode == '1'){
                            //根据后端返回的标识确定输入章节号+手册名称+发动机型号+标题
                            if(!!getData[i].engine){
                                labelValue.label = getData[i].chapter + " " + getData[i].manualType + " "+getData[i].engine + " " + getData[i].title;
                            }else {
                                labelValue.label = getData[i].chapter + " " + getData[i].manualType +  " " + getData[i].title;
                            };
                        }else {
                            labelValue.label = getData[i].chapter + " " + getData[i].title;
                        };
                        //加上空格号是为了在输入一个正确四位ATA的时候，不要把数组第一个给带进来
                        labelValue.value = getData[i].chapter+" ";
                            ataData.push(labelValue);
                        };
                        $('#ata').combobox('loadData',ataData);
                },
                error: function () {
                    ajaxLoadEnd();
                    $('#saveBtn').text("保存");
                }
            });
        }

    }

    //ATA组件初始化
    function ataSelectInit(modelTips){
        //selectFlage 用来解决当清空后直接按回车键导致重新赋值的问题
        var selectFlage = 0;
        var modelTips = modelTips||"建议先选择‘Flight NO.’";
        $("#ata").combobox({
            editable: true,
            data:ataData,
            panelHeight: 160,
            valueField: 'value',
            textField: 'label',
            width:300,
            hasDownArrow:true,
            multiple:false,
            //在选择的时候做操作
            onSelect: (data) => {
                selectFlage = 1;
                defectTypelimit(data.value);
            },
            onLoadSuccess : () => {
            },
            onChange:()=>{
                selectFlage = 0;
                var inputAta = $("#ata").combobox('getText');
                var ac = $("#model").html()||"";
                if(!ac && inputAta.length == 1 && modelTips != "hideTips"){
                    MsgAlert({type: "tip", content: modelTips});
                };
                defectTypelimit(inputAta.slice(0,4));
                    setTimeout(function () {
                    professionalData(inputAta.slice(0,2));
                    },400)
                ataDataSearch();
            }
        });
        //eventAta 用来解决使用上下键+回车键选择后，失去焦点时数据被清空需要重新进行赋值的问题
        var eventAta = "";
        $("#ata").next("span").children("input:first").blur(function () {
            //如果使用回车键选中
            setTimeout(function(){
                var ataNow = $("#ata").textbox("getValue")||eventAta;
                if(ataNow.length>3 && !!selectFlage){
                    $("#ata").textbox("setValue", ataNow.slice(0,4));
                    defectTypelimit( ataNow.slice(0,4));
                }else if(ataNow.length<4 || !selectFlage){
                    $("#ata").textbox("setValue", "");
                    lostLimit();
                }
            },300);});
        //解决当用户输入一个正确的四位章节号后，点击回车键出现输入框带入描述的问题
        $("#ata").next("span").children("input:first").keydown(function () {
            if(event.keyCode == "13") {
                var ataNow = $("#ata").combobox('getText');
                if(ataNow.length>3){
                    $("#ata").textbox("setValue", ataNow.slice(0,4));
                    eventAta = ataNow.slice(0,4);
                    selectFlage = 1;
                    defectTypelimit( ataNow.slice(0,4));
                }
            }
        });
        $("#ata").next("span").children("input:first").focus(function () {
            var getAtaData = $("#ata").combobox('getText');
            if(!!getAtaData && getAtaData.length == 4){
                selectFlage = 1;
            };
        });
    }

    /*
    *
    * */
    //根据对应的章节号和机型禁用一般或故障
    function defectTypelimit(mark){
        if(!!mark && mark.length == 4){
        $.ajax({
            type: "post",
            url: "/api/v1/ata/getGreatComponentFlag?chapter="+mark+"&acReg="+global_data.acReg,
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (data) {
                if(data.data){
                    //如果在表格中
                    if(data.data == 'Y'){
                        $("#defectCategory4").attr("disabled", false);
                        $("#defectCategory3").prop("checked", false);
                        $("#defectCategory3").attr("disabled", 'disabled');
                        // category_change(4);
                    }else if(data.data == 'N'){
                        //如果不在表格中
                        // $("#defectCategory3").prop("checked", true);
                        $("#defectCategory3").attr("disabled", false);
                        $("#defectCategory4").prop("checked", false);
                        $("#defectCategory4").attr("disabled", 'disabled');
                        // category_change(3);
                    };
                }else {
                    MsgAlert({content: "查不到章节机型匹配数据", type: 'error'});
                }
            },
            error: function () {
                MsgAlert({content: "章节机型匹配缺陷类型失败", type: 'error'});
            }
        });
    }
    }

    function lostLimit(){
        $("#defectCategory4").attr("disabled", false);
        $("#defectCategory3").attr("disabled", false);
    }





</script>
</html>
